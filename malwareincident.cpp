#include "malwareincident.h"
#include "ui_malwareincident.h"
#include <QDir>
#include <QCoreApplication>
#include <QSqlDatabase>
#include <QSqlQuery>
#include <QSqlError>
#include <QDebug>
#include <QMessageBox>
#include <QString>
#include <QRandomGenerator>

malwareincident::malwareincident(QWidget *parent)
    : QDialog(parent)
    , ui(new Ui::malwareincident)
{
    ui->setupUi(this);
    setWindowFlags(windowFlags() & ~Qt::WindowMaximizeButtonHint);
    setFixedSize(1280, 1080);
    setWindowTitle("Incident Response Tool");
    setStyleSheet("background-color: #2d42a8;");
    //connect(ui->malwareSave, &QPushButton::clicked, this, &malwareincident::saveIncident);

}

malwareincident::~malwareincident()
{
    delete ui;
}

QString malwareincident::generateRandomID() const
{
    QString randomID;
    for (int i = 0; i < 9; ++i) {
        randomID.append(QString::number(QRandomGenerator::global()->bounded(10)));
    }
    return randomID;
}



void malwareincident::on_malwareSave_clicked()
{
    QString malwareTypeStore = ui->malwareType->text();
    QString malwareDateTimeStore = ui->malwareDateTime->text();
    QString malwareSourceStore = ui->malwareSource->text();
    QString systemsAffectedStore = ui->systemsAffected->text();
    QString threatActionsStore = ui->threatActions->text();
    QString detectionMethodStore = ui->detectionMethod->text();
    QString userIsolationStore = ui->userIsolation->text();
    QString incidentAnalysisStore = ui->IncidentAnalysis->toPlainText();


    QSqlDatabase db = QSqlDatabase::addDatabase("QSQLITE", "IncidentsConnectionMalware");
    db.setDatabaseName("D:/Dissertation/SQL TEST/SQL/IncidentsDatabase.db");
    if (!db.open()) {
        QMessageBox::critical(this, "Error", "Failed to open database: " + db.lastError().text());
        return;
    }

    QSqlQuery query(db);
    query.prepare("INSERT INTO Malware (IncidentID, malwareType, malwareDateTime, malwareSource, systemsAffected, threatActions, detectionMethod, userIsolation, IncidentAnalysis) "
                  "VALUES (:IncidentID, :malwareType, :malwareDateTime, :malwareSource, :systemsAffected, :threatActions, :detectionMethod, :userIsolation, :IncidentAnalysis)");

    QString incidentID = generateRandomID();
    query.bindValue(":IncidentID", incidentID);

    query.bindValue(":malwareType", malwareTypeStore);
    query.bindValue(":malwareDateTime", malwareDateTimeStore);
    query.bindValue(":malwareSource", malwareSourceStore);
    query.bindValue(":systemsAffected", systemsAffectedStore);
    query.bindValue(":threatActions", threatActionsStore);
    query.bindValue(":detectionMethod", detectionMethodStore);
    query.bindValue(":userIsolation", userIsolationStore);
    query.bindValue(":IncidentAnalysis", incidentAnalysisStore);

    if (!query.exec()) {
        QMessageBox::critical(this, "Error", "Failed to insert malware incident information into database: " + query.lastError().text());
    } else {
        QMessageBox::information(this, "Success", "Malware incident information saved successfully!");
    }

}

