#include "malwareincidenteditor.h"
#include "ui_malwareincidenteditor.h"
#include <QDir>
#include <QCoreApplication>
#include <QSqlDatabase>
#include <QSqlQuery>
#include <QSqlError>
#include <QDebug>
#include <QMessageBox>
#include <QString>
#include <QRandomGenerator>
#include <QSqlQuery>
#include <QSqlRecord>
#include "mainmenu.h"


MalwareIncidentEditor::MalwareIncidentEditor(QWidget *parent)
    : QDialog(parent)
    , ui(new Ui::MalwareIncidentEditor)
{
    ui->setupUi(this);
    setWindowFlags(windowFlags() & ~Qt::WindowMaximizeButtonHint);
    setFixedSize(1280, 1080);
    setWindowTitle("Incident Response Tool");
    setStyleSheet("background-color: #2d42a8;");
    connect(ui->malwareSave, &QPushButton::clicked, this, &MalwareIncidentEditor::saveIncident);

    }



MalwareIncidentEditor::~MalwareIncidentEditor()
{
    delete ui;
}
void MalwareIncidentEditor::loadIncidentDetails(int incidentID) {

    qDebug() << "Loading incident details for IncidentID:" << incidentID;
    incidentIDStore = incidentID;
    QString dbFilePath = QDir(QCoreApplication::applicationDirPath()).filePath("../../../SQL TEST/SQL/IncidentsDatabase.db");

    QSqlDatabase db = QSqlDatabase::addDatabase("QSQLITE", "IncidentsConnection");
    db.setDatabaseName(dbFilePath);
    if (!db.open()) {
        QMessageBox::critical(this, "Error", "Failed to open database: " + db.lastError().text());
        return;
    }


    QSqlQuery query(db);
    query.prepare("SELECT * FROM Malware WHERE IncidentID = :incidentID");
    qDebug() << "Prepared query:" << query.lastQuery();
    query.bindValue(":incidentID", incidentID);

    if (!query.exec()) {
        qDebug() << "Error executing query:" << query.lastError().text();
        return;
    }



        if (!query.exec()) {
            qDebug() << "Error executing query:" << query.lastError().text();
            return;
        }

        if (query.next()) {
            qDebug() << "Incident found with ID:" << incidentID;

            QString malwareType = query.value("malwareType").toString();
            QString malwareDateTime = query.value("malwareDateTime").toString();
            QString malwareSource = query.value("malwareSource").toString();
            QString systemsAffected = query.value("systemsAffected").toString();
            QString threatActions = query.value("threatActions").toString();
            QString detectionMethod = query.value("detectionMethod").toString();
            QString userIsolation = query.value("userIsolation").toString();
            QString incidentAnalysis = query.value("IncidentAnalysis").toString();
            QString severity = query.value("severity").toString();
            QString ticketStatus = query.value("ticketStatus").toString();

            qDebug() << "malwareType:" << malwareType;
            qDebug() << "malwareDateTime:" << malwareDateTime;
            qDebug() << "malwareSource:" << malwareSource;
            qDebug() << "systemsAffected:" << systemsAffected;
            qDebug() << "threatActions:" << threatActions;
            qDebug() << "detectionMethod:" << detectionMethod;
            qDebug() << "userIsolation:" << userIsolation;
            qDebug() << "incidentAnalysis:" << incidentAnalysis;

            ui->malwareType->setText(malwareType);
            ui->malwareDateTime->setDateTime(QDateTime::fromString(malwareDateTime, "yyyy-MM-dd hh:mm:ss"));
            ui->malwareSource->setText(malwareSource);
            ui->systemsAffected->setText(systemsAffected);
            ui->threatActions->setText(threatActions);
            ui->detectionMethod->setText(detectionMethod);
            ui->userIsolation->setText(userIsolation);
            ui->IncidentAnalysis->setPlainText(incidentAnalysis);
            ui->severity->setCurrentText(severity);
            ui->ticketStatus->setCurrentText(ticketStatus);


        } else {
            qDebug() << "No incident found with ID:" << incidentID;
        }
 }





 void MalwareIncidentEditor::saveIncident(int incidentID)
 {
     qDebug() << "Initial value of incidentID Number 2:" << incidentIDStore;
     QString malwareTypeStore = ui->malwareType->text();
     QString malwareDateTimeStore = ui->malwareDateTime->text();
     QString malwareSourceStore = ui->malwareSource->text();
     QString systemsAffectedStore = ui->systemsAffected->text();
     QString threatActionsStore = ui->threatActions->text();
     QString detectionMethodStore = ui->detectionMethod->text();
     QString userIsolationStore = ui->userIsolation->text();
     QString IncidentAnalysisStore = ui->IncidentAnalysis->toPlainText();
     QString severityStore = ui->severity->currentText();
     QString statusStore = ui->ticketStatus->currentText();

     QString dbFilePath = QDir(QCoreApplication::applicationDirPath()).filePath("../../../SQL TEST/SQL/IncidentsDatabase.db");

     QSqlDatabase db = QSqlDatabase::addDatabase("QSQLITE", "IncidentsConnection");
     db.setDatabaseName(dbFilePath);
     if (!db.open()) {
         QMessageBox::critical(this, "Error", "Failed to open database: " + db.lastError().text());
         return;
     }

     QSqlQuery query(db);
     query.prepare("UPDATE Malware SET IncidentID = :incidentID,"
                   "malwareType = :malwareType, "
                   "malwareDateTime = :malwareDateTime, "
                   "malwareSource = :malwareSource, "
                   "systemsAffected = :systemsAffected, "
                   "threatActions = :threatActions, "
                   "detectionMethod = :detectionMethod, "
                   "userIsolation = :userIsolation, "
                   "IncidentAnalysis = :IncidentAnalysis, "
                   "severity = :severity, "
                   "ticketStatus = :ticketStatus "
                   "WHERE IncidentID = :incidentID");

     query.bindValue(":incidentID", incidentIDStore);
     query.bindValue(":malwareType", malwareTypeStore);
     query.bindValue(":malwareDateTime", malwareDateTimeStore);
     query.bindValue(":malwareSource", malwareSourceStore);
     query.bindValue(":systemsAffected", systemsAffectedStore);
     query.bindValue(":threatActions", threatActionsStore);
     query.bindValue(":detectionMethod", detectionMethodStore);
     query.bindValue(":userIsolation", userIsolationStore);
     query.bindValue(":IncidentAnalysis", IncidentAnalysisStore);
     query.bindValue(":severity", severityStore);
     query.bindValue(":ticketStatus", statusStore);

     qDebug() << "Values bound to the update query:";
     qDebug() << "IncidentID:" << incidentIDStore;
     qDebug() << "malwareType:" << malwareTypeStore;
     qDebug() << "malwareDateTime:" << malwareDateTimeStore;
     qDebug() << "malwareSource:" << malwareSourceStore;
     qDebug() << "systemsAffected:" << systemsAffectedStore;
     qDebug() << "threatActions:" << threatActionsStore;
     qDebug() << "detectionMethod:" << detectionMethodStore;
     qDebug() << "userIsolation:" << userIsolationStore;
     qDebug() << "IncidentAnalysis:" << IncidentAnalysisStore;

     if (!query.exec()) {
         qDebug() << "Error executing query:" << query.lastError().text();
         return;
     }

     if (query.numRowsAffected() == 1) {
         qDebug() << "Malware incident information updated successfully!";
     } else {
         qDebug() << "Failed to update malware incident information!";
     }
 }

void MalwareIncidentEditor::on_pushButton_clicked()
{
    this->hide();
    mainMenu menu;
    menu.setModal(true);
    menu.exec();

}

